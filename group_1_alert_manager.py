# Name: Misha Mansoor
# Date: 2025-08-12
# Description: This module manages alerts for IoT devices, sending notifications via email using SMTP.

# group_1_alert_manager.py
import smtplib
from email.mime.text import MIMEText
import json

SENDGRID_API_KEY = "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"
class AlertManager:
    # Initializes the AlertManager class
    def __init__(self, config_path="group_1_config.json"):
        self.cfg = self._load_config(config_path) # Load the configuration from a JSON file
        self.smtp_cfg = self.cfg.get("alerts", {}).get("smtp", {}) # Extract SMTP configuration from the loaded config

    # Loads the configuration from a JSON file
    def _load_config(self, path):
        try:
            with open(path, "r") as f: # Open the configuration file
                return json.load(f) # Load the JSON configuration
        except Exception as e: # Handle any exceptions that occur during file reading or JSON parsing
            print(f"[ALERT_MANAGER] Config load failed: {e}")
            return {}

   # Sends an alert with the given parameters
    def send_alert(self, device_id, location, value, reason):
        subject = f"IoT Alert: {reason}" # Create a subject line for the alert
        # Create the body of the alert message
        body = f"""
        Device ID: {device_id}
        Location: {location}
        Value: {value}
        Reason: {reason} Generated by IoT Monitoring System.
        """
        self._send_smtp(subject, body)

    # Sends an alert via SMTP
    def _send_smtp(self, subject, body):
        try:
            msg = MIMEText(body, "plain") # Create a plain text message
            msg["Subject"] = subject # Set the subject of the email
            msg["From"] = self.smtp_cfg.get("sender") # Set the sender's email address
            msg["To"] = ", ".join(self.smtp_cfg.get("receivers", [])) # Set the receiver's email addresses

            with smtplib.SMTP(self.smtp_cfg.get("server"), self.smtp_cfg.get("port")) as server:
                server.starttls()  # Upgrade the connection to a secure encrypted SSL/TLS connection
                server.login(self.smtp_cfg.get("username"), self.smtp_cfg.get("password")) # Login to the SMTP server
                server.sendmail(self.smtp_cfg.get("sender"), self.smtp_cfg.get("receivers", []), msg.as_string()) # Send the email
            print("[ALERT_MANAGER] SMTP alert sent successfully.") # Log success message
        except Exception as e:
            print(f"[ALERT_MANAGER] SMTP send failed: {e}") # Log any errors that occur during sending